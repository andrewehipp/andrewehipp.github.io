/**
 * Packages
 *
 * '$' is an object generated by the devDependencies in package.json. If needed,
 * console.log($) can be used to check $'s so long as 'lazy: false' is set.
 */
const gulp =  require('gulp');
const $ =     require('gulp-load-plugins')({
    pattern: '*',
    lazy: false,
    scope: ['devDependencies'],
    replaceString: /^gulp(-|\.)/,
});



/**
 * ASSET PATHS
 *
 * Object that contains paths for all asset types. Useful for changing build
 * environments.
 */
const PATH = {
    scss:   './resources/scss',
    es6:    './resources/js',
    css:    './assets/css',
    js:     './assets/js',
    vendor: './assets/vendor',
};






/**
 * SCSS Linting
 */
function scssLint() {

    return gulp
        .src(`${PATH.scss}/**/*.scss`)
        .pipe($.scssLint({
            config: './.scss-lint.yml',
        }));

}

gulp.task('scss-lint', scssLint);

/**
 * Compile SCSS, auto-prefix, and minify in one step, for clean sourcemaps.
 */
function sass() {

    return gulp
        .src(`${PATH.scss}/**/*.scss`)

        // Init sourcemaps
        .pipe($.sourcemaps.init())

        // Sass pre-processing
        .pipe($.sass().on('error', function (err) {
            console.log(err.message);
            this.emit('end'); // Prevent gulp from catching the error and exiting watch process.
        }))

        // Inline images as base64 into the css
        // .pipe($.inlineBase64({
        //     baseDir: PATH.scss,
        //     // 12kb max size
        //     maxSize: 1024 * 12,
        //     // Debug output in the console
        //     debug: false,
        // }))

        // Autoprefixer process
        .pipe($.autoprefixer({
            browsers: ['last 2 versions'],
        }))

        // End sourcemaps, write to CSS path and update br
        .pipe($.sourcemaps.write('.'))
        .pipe(gulp.dest(PATH.css));

}

gulp.task('sass', sass);


/**
 * Build production.min.css
 */
function css() {

    return gulp
        .src([
            `${PATH.vendor}/normalize/normalize.css`,
            `${PATH.css}/global.css`,
        ])
        .pipe($.concat('production.min.css'))
        .pipe($.cleanCss({
            compatibility: 'ie8',
            mediaMerging: false,
            advanced: false,
        }))
        .pipe(gulp.dest(PATH.css));
}

gulp.task('css', css);


/**
 * Styles series and parallel functions
 */
const styles = gulp.parallel(scssLint, gulp.series(sass, css));



/**
 * Lint the main js file. jshint-stylish provides nice output
 * JavaScript Code Style (http://jscs.info/rules.html)
 */
// TODO: Need to refactor and use ESLint.
function jsLint() {

    // return true;
    return gulp
        .src([
            `${PATH.es6}/**/*.js`,
            `${PATH.es6}/**/*.jsx`,
        ])
        .pipe($.eslint({
            configFile: './.eslintrc',
        }))
        .pipe($.eslint.format());

}

gulp.task('js-lint', jsLint);



// Bundler function
function bundle() {

    return gulp
        .src(`${PATH.es6}/main.js`)
        .pipe($.webpackStream({
            entry: {
                main: `${PATH.es6}/main.js`,
            },
            output: {
                filename: '[name].js',
            },
            module: {
                loaders: [
                    {
                        test: /\.js$/,
                        exclude: /(node_modules|bower_components)/,
                        loader: 'babel-loader',
                        query: {
                            presets: ['es2015', 'react'],
                        },
                    },
                ],
            },
            devtool: 'source-map',
        }))
        .pipe(gulp.dest(PATH.js));

}

gulp.task('bundle', bundle);



/**
 * Build Production.min.js
 */
function js() {

    return gulp
        .src([
            `${PATH.js}/main.js`,
        ])
        .pipe($.concat('production.min.js'))
        .pipe($.uglify())
        .pipe(gulp.dest(PATH.js));

}

gulp.task('js', js);


/**
 * Styles series and parallel functions
 */
const scripts = gulp.parallel(jsLint, gulp.series('bundle', js));



/**
 * Build task to bring everything together
 */
const build = gulp.parallel(styles, scripts);

gulp.task('build', build);




/**
 * Watch for changes
 */
function watch() {

    gulp.watch(`${PATH.scss}/**/*.scss`, styles);
    gulp.watch([
        `${PATH.es6}/**/*.js`,
        `${PATH.es6}/**/*.jsx`,
    ],
    scripts);

    // Stop old gulp watch when gulpfile is modified.
    // https://gist.github.com/pornel/ca9631f5348383b61bc7b359e96ced38
    gulp.watch('gulpfile.js', () => {
        process.exit(0);
    });

}

gulp.task('watch', gulp.series('build', watch));



/**
 * Default
 */
gulp.task('default', build);
